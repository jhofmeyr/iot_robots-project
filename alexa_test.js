// Copy / paste the JSON generated by your Alexa skill here, with the intent removed
const eventTemplate = (intent) => {
  return {
    "version": "1.0",
    "session": {
      "new": true,
      "sessionId": "your session id",
      "application": {
        "applicationId": "your application id"
      },
      "user": {
        "userId": "your user id"
      }
    },
    "context": {
      "System": {
        "application": {
          "applicationId": "your application id"
        },
        "user": {
          "userId": "your user id"
        },
        "device": {
          "deviceId": "your device id",
          "supportedInterfaces": {}
        },
        "apiEndpoint": "https://api.amazonalexa.com",
        "apiAccessToken": "your api access token"
      }
    },
    "request": {
      "type": "IntentRequest",
      "requestId": "some request id",
      'timestamp': "2018-07-18T23:12:47Z",
      "locale": "en-GB",
      "intent": intent,
      "dialogState": "STARTED"
    }
  }
}

// A run-away intent with the slot value parameterised
var runAwayTemplate = (ball_name) => {
  return {
    "name": "run_away",
    "confirmationStatus": "NONE",
    "slots": {
      "ball_name": {
        "name": "ball_name",
        "value": `${ball_name}`,
        "resolutions": {
          "resolutionsPerAuthority": [
            {
              "authority": "your authority token",
              "status": {
                "code": "ER_SUCCESS_NO_MATCH"
              }
            }
          ]
        },
        "confirmationStatus": "NONE"
      }
    }
  }
}

// The come home intent doesn't have any slots so we can hard-code it
const comeHomeIntent = {
  name: "come_home",
  confirmationStatus: "NONE"
}

const intentBuilder = (name, ball_name) => {
  return eval(`${name}(${ball_name})`)
}

const lambda = require('./index.js')

// Required to handle keyboard input
const readline = require('readline');
readline.emitKeypressEvents(process.stdin);
process.stdin.setRawMode(true);

var actions = new Map();

// Print the menu of available options on screen.
// Invalid keys will just be ignored
function refreshList(balls) {
  console.log("Please select an action:")
  actions.clear()
  actions.set('1', 'come_home')
  balls.forEach(function(ball, index) {
    actions.set((index + 2).toString(), ball)
  })
  actions.forEach((value, key) => {
    key == '1' ? console.log('1 = Tell the balls to go home!') : console.log(`${key} - Tell ${value} to run away!`)
  })
  console.log("(ctrl+c to quit, or 'r' to refresh this list)")
}

function eventBuilder(action) {
  if (action == 'come_home') {
    return eventTemplate(comeHomeIntent)
  } else {
    return eventTemplate(runAwayTemplate(action))
  }
}

// Handle keypresses
process.stdin.on('keypress', function (str, key) {
  if (key && key.ctrl && key.name == 'c') {
    process.exit()
  } else if (key && key.name == 'r') {
    var balls = lambda.getBalls()
    // This gives lambda.getBalls() 5 seconds to return the list of connected balls.  Seems to work
    setTimeout(() => {
      refreshList(balls)
    }, 5000)
  } else {
    if (actions.has(str)) {
      var event = eventBuilder(actions.get(str))
      lambda.handler(event)
    }
  }
})

var balls = lambda.getBalls()
setTimeout(() => {
  refreshList(balls)
}, 5000)
